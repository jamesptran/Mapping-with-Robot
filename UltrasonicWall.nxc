// Global variables
unsigned int result; // flag returned when handling files
byte fileHandle; // handle to the data file
short fileSize; // size of the file
short bytesWritten; // number of bytes written to the file
string fileHeader; // column header for data in the file
int fileNumber, filePart; // integers to split up data file names
string fileName; // name of the file
string strFileNumber; // file number e.g myDataFile 1, 2, 3
string strFilePart; // file part e.g. myDataFile1-1, 1-2, 1-3
string text; // string to be written to file i.e. data values
float white = 57.0;
float yellow = 70.0;
float calibration = 1.267; // = sensor3 / sensor1
float sensor1=0;
float sensor3=0;
int firstdegree;
int seconddegree;
int compassvalue;
bool read = false;
bool forward = true;
float speedcalibration = 1.016; //=motorA / motorB

void InitWriteToFile() {
  fileNumber = 0;  // set first data file to be zero
  filePart = 0; // set first part of first data file to zero
  fileName = "Distance.csv"; // name of data file
  result=CreateFile(fileName, 1024, fileHandle);
  // returns file handle (unsigned int)
  // check if the file already exists

    while (result==LDR_FILEEXISTS) // LDR_FILEEXISTS is returned if file pre-exists
     {
      CloseFile(fileHandle);
      fileNumber = fileNumber + 1; // if data file already exists, create new one
      fileName=NumToStr(fileNumber);
      fileName=StrCat("Distance", fileName, ".csv");
      result=CreateFile(fileName, 1024, fileHandle);
      } // end while

  // Write string and new line to a file
  // bytesWritten is an unsigned int.  Its value is # of bytes written
} // end InitWriteToFile

void WriteToFile(string strTempText) {
      // strTempText stores the text (i.e. stuffs to be written to file)
    // write string to file
    result=WriteLnString(fileHandle, strTempText, bytesWritten);
    // if the end of file is reached, close the file and create a new part
    if (result==LDR_EOFEXPECTED) // LDR_EOFEXPECTED is flagged when end-of-file
        {
        // close the current file
        CloseFile(fileHandle);
        // Closes file associated with file handle
    // create the next file name
    filePart = filePart + 1;
    strFileNumber = NumToStr(fileNumber);
    strFilePart = NumToStr(filePart);
    fileName = StrCat("Distance", strFileNumber,"-", strFilePart ,".csv");
        // delete the file if it exists
        DeleteFile(fileName);
        // Delete the file specified by the string input
        // create a new file
        CreateFile(fileName, 1024, fileHandle);
        // play a tone every time a file is created
        PlayTone(TONE_B7, 5);
        WriteLnString(fileHandle, strTempText, bytesWritten);
        } // end if
    } // end WriteToFile

void StopWriteToFile() {
  // close the file
  CloseFile(fileHandle);
} // end StopWriteToFile

void TurnRight(){
    Off(OUT_AB);
    OnFwd(OUT_B, 50*speedcalibration);
    Wait(100);
    Off(OUT_AB);
    OnFwd(OUT_A,50);
    Wait(100);
    Off(OUT_AB);
}

void TurnLeft(){
    Off(OUT_AB);
    OnFwd(OUT_A, 50);
    Wait(100);
    Off(OUT_AB);
    OnFwd(OUT_B,50*speedcalibration);
    Wait(100);
    Off(OUT_AB);
}

void StopTheMotor(){
    Off(OUT_AB);
}

void Fwd(){
    OnFwd(OUT_B, 60*speedcalibration);
    OnFwd(OUT_A, 60);
}

void Turn90(){
    Off(OUT_AB);
    OnFwd(OUT_B, 50*speedcalibration);
    Wait(1000);
}

int Compass(){
    SetSensorLowspeed(S4);
    int currentCompass;
    int i = 0;
    for (i = 0; i<5; i++){
        currentCompass += SensorHTCompass(S4);
        Wait(100);
    }
    return currentCompass/i;
}

int UltrasonicFront(){
    int TotalDistanceInCm = 0;
    SetSensorLowspeed(IN_2);
    int i = 0;
    for (i=0;i<5;i++){
        TotalDistanceInCm += SensorUS(IN_2);
        Wait(100);
    }
    TotalDistanceInCm /= i;
    return TotalDistanceInCm;
}

int UltrasonicBack(){
    int TotalDistanceInCm = 0;
    SetSensorLowspeed(IN_1);
    int i = 0;
    for (i=0;i<5;i++){
        TotalDistanceInCm += SensorUS(IN_2);
        Wait(100);
    }
    TotalDistanceInCm /= i;
    return TotalDistanceInCm;
}

task main(){
    int middledistance = 20;
    int far = 23;
    int close = 17;
    int toofar = 50;
    long firsttick = CurrentTick();
    long current = CurrentTick();

    InitWriteToFile();
    WriteToFile("Heading,Distance,Ticks");

    do {
        int USreading = UltrasonicFront();
        current = CurrentTick();
        if (current - firsttick >= 2000){
            //Read compass
            compassvalue = compass();
            text = NumToStr(compassvalue) + "," + NumToStr(seconddegree - firstdegree) + "," + NumToStr(CurrentTick() - FirstTick());
            firsttick = CurrentTick();
            WriteToFile(text);
        }
        if((USreading> close) && (USreading<far)){
            Fwd();
        }

        if (USreading < close) {
            TurnLeft();
        }
        if (USreading > far && USreading < toofar) {
            TurnRight();
        }
        if (USreading > toofar) {
            StopTheMotor();
            break;
        }
    } while (true);
}
