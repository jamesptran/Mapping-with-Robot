// Global variables
unsigned int result; // flag returned when handling files
byte fileHandle; // handle to the data file
short fileSize; // size of the file
short bytesWritten; // number of bytes written to the file
string fileHeader; // column header for data in the file
int fileNumber, filePart; // integers to split up data file names
string fileName; // name of the file
string strFileNumber; // file number e.g myDataFile 1, 2, 3
string strFilePart; // file part e.g. myDataFile1-1, 1-2, 1-3
string text; // string to be written to file i.e. data values
float white = 57.0;
float yellow = 70.0;
float calibration = 1.267; // = sensor3 / sensor1
float sensor1=0;
float sensor3=0;
int firstdegree;
int seconddegree;
int compassvalue;
bool read = false;
bool forward = true;


void TurnRight(){
    Off(OUT_A);
    OnFwd(OUT_B, 50);
}

void TurnLeft(){
    OnFwd(OUT_A, 50);
    Off(OUT_B);
}

void StopTheMotor(){
    Off(OUT_AB);
}

void Fwd(){
    OnFwd(OUT_AB, 79);
    OnFwd(OUT_B, 80);
}

void InitWriteToFile() {
  fileNumber = 0;  // set first data file to be zero
  filePart = 0; // set first part of first data file to zero
  fileName = "Distance.csv"; // name of data file
  result=CreateFile(fileName, 1024, fileHandle);
  // returns file handle (unsigned int)
  // check if the file already exists

    while (result==LDR_FILEEXISTS) // LDR_FILEEXISTS is returned if file pre-exists
     {
      CloseFile(fileHandle);
      fileNumber = fileNumber + 1; // if data file already exists, create new one
      fileName=NumToStr(fileNumber);
      fileName=StrCat("Distance", fileName, ".csv");
      result=CreateFile(fileName, 1024, fileHandle);
      } // end while

  // Write string and new line to a file
  // bytesWritten is an unsigned int.  Its value is # of bytes written
} // end InitWriteToFile

void WriteToFile(string strTempText) {
      // strTempText stores the text (i.e. stuffs to be written to file)
    // write string to file
    result=WriteLnString(fileHandle, strTempText, bytesWritten);
    // if the end of file is reached, close the file and create a new part
    if (result==LDR_EOFEXPECTED) // LDR_EOFEXPECTED is flagged when end-of-file
        {
        // close the current file
        CloseFile(fileHandle);
        // Closes file associated with file handle
    // create the next file name
    filePart = filePart + 1;
    strFileNumber = NumToStr(fileNumber);
    strFilePart = NumToStr(filePart);
    fileName = StrCat("Distance", strFileNumber,"-", strFilePart ,".csv");
        // delete the file if it exists
        DeleteFile(fileName);
        // Delete the file specified by the string input
        // create a new file
        CreateFile(fileName, 1024, fileHandle);
        // play a tone every time a file is created
        PlayTone(TONE_B7, 5);
        WriteLnString(fileHandle, strTempText, bytesWritten);
        } // end if
    } // end WriteToFile

void StopWriteToFile() {
  // close the file
  CloseFile(fileHandle);
} // end StopWriteToFile

void calibrate(){
    TextOut(0,0,"White part");
    Wait(4500);
    sensor1 = Sensor(IN_1);
    sensor3 = Sensor(IN_3);
    sensor1 *= calibration;
    float avgWhite1 = (sensor1 + sensor3)/2;
    Wait(200);

    sensor1 = Sensor(IN_1);
    sensor3 = Sensor(IN_3);
    sensor1 *= calibration;
    float avgWhite2 = (sensor1 + sensor3)/2;
    Wait(200);

    sensor1 = Sensor(IN_1);
    sensor3 = Sensor(IN_3);
    sensor1 *= calibration;
    float avgWhite3 = (sensor1 + sensor3)/2;
    Wait(200);

    float avgWhite = (avgWhite1 + avgWhite2 + avgWhite3)/3;

    TextOut(0,10,"Grey part");
    Wait(4500);
    sensor1 = Sensor(IN_1);
    sensor3 = Sensor(IN_3);
    sensor1 *= calibration;
    float avgGrey1 = (sensor1 + sensor3)/2;
    Wait(200);

    sensor1 = Sensor(IN_1);
    sensor3 = Sensor(IN_3);
    sensor1 *= calibration;
    float avgGrey2 = (sensor1 + sensor3)/2;
    Wait(200);

    sensor1 = Sensor(IN_1);
    sensor3 = Sensor(IN_3);
    sensor1 *= calibration;
    float avgGrey3 = (sensor1 + sensor3)/2;
    Wait(200);

    float avgGrey = (avgGrey1 + avgGrey2 + avgGrey3)/3;

    TextOut(0,20,"Yellow part");
    Wait(4500);
    sensor1 = Sensor(IN_1);
    sensor3 = Sensor(IN_3);
    sensor1 *= calibration;
    float avgYellow1 = (sensor1 + sensor3)/2;
    Wait(200);

    sensor1 = Sensor(IN_1);
    sensor3 = Sensor(IN_3);
    sensor1 *= calibration;
    float avgYellow2 = (sensor1 + sensor3)/2;
    Wait(200);

    sensor1 = Sensor(IN_1);
    sensor3 = Sensor(IN_3);
    sensor1 *= calibration;
    float avgYellow3 = (sensor1 + sensor3)/2;
    Wait(200);

    float avgYellow = (avgYellow1 + avgYellow2 + avgYellow3)/3;

    white = (avgWhite + avgGrey)/2;
    yellow = (avgWhite + avgYellow)/2;
}

int CurrentDeg(){
    int degA = MotorRotationCount(OUT_A);
    int degB = MotorRotationCount(OUT_B);
    return ((degA+degB)/2);
}

int Compass(){
    SetSensorLowspeed(S4);
    Wait(100);  //small delay while setting ownGoal
    int currentCompass;
    currentCompass = SensorHTCompass(S4);
    return currentCompass;
}


task main(){
    SetSensorLight(IN_3);
    SetSensorLight(IN_1);

    InitWriteToFile();
    WriteToFile("Compass,Degree");
    //calibrate

    //calibrate();

    firstdegree = CurrentDeg();
    compassvalue = Compass();

    Fwd();
    Wait(800);
    seconddegree = CurrentDeg();
    text = NumToStr(compassvalue) + "," + NumToStr(seconddegree - firstdegree);
    WriteToFile(text);

    do {
        sensor1 = Sensor(IN_1);
        sensor3 = Sensor(IN_3);
        sensor1 *= calibration;
        if ((sensor1 > yellow) || (sensor3 > yellow)) {

            seconddegree = CurrentDeg();
            text = NumToStr(compassvalue) + "," + NumToStr(seconddegree - firstdegree);
            WriteToFile(text);
            StopTheMotor();
            StopWriteToFile();
            break;
        }
        if ((sensor1 <= white) && (sensor3 <= white)) {
            if (forward){
                StopTheMotor();
                compassvalue = Compass();
                firstdegree = CurrentDeg();
                forward = false;
                read = true;
            }
            Fwd();
        }
        if (sensor1 >= white) {
            if (read){
                StopTheMotor();
                seconddegree = CurrentDeg();
                text = NumToStr(compassvalue) + "," + NumToStr(seconddegree - firstdegree);
                WriteToFile(text);
                read = false;
                forward = true;
            }
            TurnRight();
            Wait(10);
        }
        if (sensor3 >= white) {
            if (read){
                StopTheMotor();
                seconddegree = CurrentDeg();
                text = NumToStr(compassvalue) + "," + NumToStr(seconddegree - firstdegree);
                WriteToFile(text);
                read = false;
                forward = true;
            }
            TurnLeft();
            Wait(10);
        }
        Wait(1);
    } while (true);

}
